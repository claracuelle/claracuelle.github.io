---
interface Props {
  classValue?: string, targets: string
}

let { classValue = '', targets } = Astro.props
---

<button
  class={classValue}
  type="button"
  data-component="toggle"
  data-targets={targets}
>
<slot />
</button>

<script>
  const allToggleBtn = document.querySelectorAll<HTMLButtonElement>('[data-component="toggle"]')
  allToggleBtn.forEach(($toggleBtn) => {
    const { targets } = $toggleBtn.dataset
    if (!targets) return

    let allTargets: string[] = []
    if (targets.includes('&')) {
      allTargets = targets.split('&')
    } else {
      allTargets.push(targets)
    }
    const allTargetsElements: HTMLElement[] = []
    for (const target of allTargets) {
      if (target === "this") {
        allTargetsElements.push($toggleBtn)
        continue
      }
      const $target = document.querySelector<HTMLElement>(target)
      if (!$target) continue
      allTargetsElements.push($target)
    }
    if (allTargetsElements.length === 0) return

    $toggleBtn.addEventListener("click", () => {
      for (const $target of allTargetsElements) {
        $target.classList.toggle('is-active')
      }
    })
  })
</script>
